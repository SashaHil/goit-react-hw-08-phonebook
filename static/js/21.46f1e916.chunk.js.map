{"version":3,"file":"static/js/21.46f1e916.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/Filter/Filter.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  ErrorMessage as FormikErrorMessage,\n  Field as FormikField,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  color: red;\n`;\n\nexport const Field = styled(FormikField)`\n  outline: transparent;\n\n  &:focus {\n    border: 2px solid rgba(33, 243, 215, 0.6);\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  min-width: 300px;\n  color: white;\n`;\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n\n  margin-bottom: 10px;\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: #2196f3;\n  color: #ffffff;\n\n  border-radius: 4px;\n  border: transparent;\n\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #188ce8;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const Input = styled.input`\n  min-width: 300px;\n\n  outline: transparent;\n\n  &:focus {\n    border: 2px solid rgba(33, 243, 215, 0.6);\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, ErrorMessage, Field, Button, Label } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst InputSchema = Yup.object().shape({\n  name: Yup.string().required('Must be required'),\n  number: Yup.string().required('Must be required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const isDublicate = ({ name, number }) => {\n    const refName = name.toLowerCase().trim();\n    const refNumber = number.trim();\n\n    const dublicate = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === refName || contact.number === refNumber\n    );\n    return Boolean(dublicate);\n  };\n\n  const onAddContact = ({ name, number }) => {\n    if (isDublicate({ name, number })) {\n      return alert(`${name} or ${number} is already in contacts.`);\n    }\n    dispatch(addContact({ name, number }));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={InputSchema}\n      onSubmit={(values, { resetForm }) => {\n        onAddContact({ ...values });\n        resetForm();\n      }}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n\n        <ErrorMessage name=\"name\" component=\"div\" />\n\n        <Label>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n\n        <ErrorMessage name=\"number\" component=\"div\" />\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { Button, Contact } from 'components/ContactList/ContactList.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectFilteredContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { ListItem, Name, Number } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <>\n      <ul>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ListItem key={id}>\n              <Contact>\n                <Name>{name}: </Name>\n                <Number>{number} </Number>\n              </Contact>\n              <Button\n                disabled={isLoading}\n                type=\"button\"\n                onClick={() => handleDelete(id)}\n              >\n                Delete\n              </Button>\n            </ListItem>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","import { Text } from 'components/ContactList/ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilter = e => {\n    const filterText = e.target.value.trim();\n    dispatch(setFilter(filterText));\n  };\n\n  return (\n    <Label>\n      <Text>Find contacts by name</Text>\n      <Input type=\"text\" value={filter} onChange={handleFilter} />\n    </Label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const getFilteredContacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>Contacts</Helmet>\n      <ContactForm />\n\n      {isLoading && <Loader />}\n\n      {contacts.length !== 0 && (\n        <div>\n          <Filter />\n          {getFilteredContacts.length !== 0 && <ContactList />}\n        </div>\n      )}\n\n      {error && <b>{error}</b>}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Form","styled","FormikForm","ErrorMessage","FormikErrorMessage","Field","FormikField","Label","Button","Input","selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","name","toLowerCase","includes","InputSchema","Yup","shape","required","number","ContactForm","dispatch","useDispatch","useSelector","onAddContact","refName","trim","refNumber","dublicate","find","contact","Boolean","isDublicate","alert","addContact","initialValues","validationSchema","onSubmit","values","resetForm","type","pattern","title","component","ContactList","filteredContacts","useEffect","fetchContacts","map","id","disabled","onClick","contactId","deleteContact","Filter","I","value","onChange","e","filterText","target","setFilter","getFilteredContacts","Helmet","Loader","length"],"sourceRoot":""}